##########bloody shit################
when Vim in command mode
    you wanna type the bloody ^m 
    you nned to type CTRL-V <CR>

Vi and Vim Editor Syntax of the text substitution inside vim editor:
    :[range]s[substitute]/{parttern}/{string}/[flags] [count]

Following are three possible flags.
    [c] Confirm each substitution
    [g] Replace all occurrences in the line
    [i] Ignore case for the pattern

for the [range]
:s  means current line
:%s means every lines

Replace all 'foo' with 'bar' on line
    :s/foo/bar/g

Replace first 'foo' with 'bar' on every line
    :%s/foo/bar/

Ignore case replace first 'foo' with 'bar'
    :s/foo/bar/i

Replace all 'foo' with 'bar' between lines 2 and 9
    :2,9s/foo/bar/g
##########bloody shit################




/********************************vim*********************************/
Move to next word       w

Move to first line of screen    H   

Append      a

Move to middle line of screen   M

Enter replace mode  R

Move to last line of screen     L

Insert      i

Enter replace mode      R

Move to end of line     $

Move right one character    h

Insert at start of line     I

Go to command mode  esc


Insert new line above       O

move to last line of screen     L

Insert new line below   o

Change char and return to cmd mode      r

Delete word     dw

Move to end of word     e

Move to previous word       b

Move to begginning of word      b

Change rest of current word     ce

Append at end of line   A

Move before previous 'w' on line    Tw
    
Move before next 'w' on line    tw
    
Repeat last f,F,t,or T      ;
    
Repeat last f,F,t,or T reversed     ,
    
Move to next 'w' on line        fw
    
Move to previous 'w' on line        Fw
    
Move before next 'w' on line    tw
    
Move backward one screen    ^b
    
Go to line 12   12G
    
Move 5 words forward    5w
    
Move 5 words backward   5b

Scroll down     ^e

Scroll up       ^y
    
/********************************vim*********************************/






/********************************Git*********************************/
show what's changed but not yet staged
    git diff

Initialize a repository
    git init

Commit changed
    git commit 

Stage modified file main.txt
    git add main.txt

Pull data from remote 'develop' without merging
    git fetch develop

Show status of working tree
    git status

Stage files and commit
    git commit -a

Fetch and merge branch 'develop' from origin
    git pull origin develop

start tracking file.txt
    git add file.txt

Create local copy of remote repository at 'url'
    git clone url

Show branches not yet merged into current branch
    git branch --no-merged

Show last commit on all branch
    git branch -v

Delete remote branch 'fix2' from origin
    git push origin :fix2 (caution: there is a blank between origin and the colon)

Create local branch 'fix1' based off origin branch
    git checkout -b fix1 origin/fix1

Create tracking branch 'fix2' based off origin
    git checkout --track origin/fix2

Push local branch 'feature1' to origin
    git push origin feature1

Push develop branch to remote staging master
    git push staging develop:master

Show branches already merged into current branch
    git branch --merged

/********************************Git*********************************/









/********************************Python*********************************/
Python Strings-Whitespace I practice    
Center s with blank padding of width # 'hi' => ' hi '
    s.center(width)

Right justify s with total size of width # 'hello' => ' hello'
    s.rjust(width)

Left justify s with total size of width
    s.ljust(width)

Return true if s only contains whitespace characters
    s.isspace()

Slice of s from i to j with step k
    s[i;j;k]

Return highest index of s2 in 2(raise ValueError if not found)
    s.rindex(s2)

Index of first occurrence of s2 in s after index i and before index j
    s.index(s2,i,j)

Return highest index of s2 in s
    s.frind(s2)
/********************************Python*********************************/




/********************************Regex*********************************/
Regex-Character Classes I Practice
Match a single character other than white space
    \S
Match preceding character 1 or more times
    +
Escape a special character
    \
Match a digit character
    \d
Match any single character
    .
Match a single white space character(space.tab.form feed,or line end)
    \s
Match a non-digit character
    \D
Match either 'x' or 'y'
    x | y
Match any alphanumeric character(including underscore)
    \w
Match any non-word character
    \W

Match a word boundary
    \b

Match a non-word boundary
    \B

Match anything not in character set 'abc'
    [^abc]


/********************************Regex*********************************/



Change highlighted text     
    c

Visual mode select characters
    v (lowercase)

Visual mode highlight lines
    V (uppercase)

Go to match parenthesis or bracket
    %

Shift right
    >

Shift left
    <

Swap case
    ~

Re-indent selection
    =

Yank(copy)highlighted text
    y

Cut highlighted text
    d

Write selection to 'filename'
    :w filename

Repeat last command as root
    sudo !!

Repeat last command
    !!

Execute command 3 in history
    !3

Internet Message Access Protocol(IMAP)
    143

Network Time protocol(NTP)
    123

Client to server Dynamic Host Configuration Protocol v6(DHCPv6)
    546

Create a tar 'file.tar' with 'files'
    tar cf file.tar files

Extract files from 'file.tar'
    tar xf file.tar

Create tar with gzip compression
    tar czf file.tar.gz files

Extract files from file.tar.gz
    tar xzf file.tar.gz

Extract files from file.tar
    tar xf file.tar

Compress 'file' with gzip
    gzip file

Decompress file.gz
    gzip -d file.gz

If then condition
    ?()

If then else condition
    ?()|

Once-only subexpression
    ?>

Lookbehind
    ?<=

Negative lookbehind
    ?<!

Lookahead
    ?=

Negative lookahead
    ?!

Comment
    ?#

Close all windows
    :qa

Set current buffer to 'finename'
    :e filename

Write selection to 'filename'
    :w filename

New window to left
    :vs

New window above
    :sp

Return s joined by iterable '123' # 'hello'=>'1hello2hello3'
    s.join('123')

Partition string at last occurence of sep,return 3 tuple with part before,
the sep,and part after # 'hello'=> ('hel','l','o')
    s.rpartition(sep)

Return list of s split by sep with leftmost maxsplit performed
    s.split(sep, maxsplit)

Return a list of lines in s # 'hello\nworld'=>['hello','world']
    s.splitlines()

Set current buffer to 'filename'
    :e filename
    
Show character info
    ga

Show file info
    ^g
    
Save and exit if modified
    :x

Delete 'filename'
    :!rm filename

Execute and insert results of 'cmd'
    :r !cmd

Read and insert 'filename'
    :r filename

Open new file
    :e

Delete all blank lines
    :g/^$/d

Match at least n and at most m occurrences of the preceding character
    {n,m}

Match exactly n occurrences of preceding character
    {n}

Match 0 or 1
    ?

Delete lines which stars with blank
    :%s/^ *//g

Delete lines which ends with blank
    :%s/ *$//g

File Transfer Protocol-Data(FTP-DATA)
    20

File Transfer Protocol-Control(FTP)
    21

Match a NULL
    \0

Match a tab
    \t

Match a line feed
    \n

Match a carriage return
    \r

Match control character X in a string
    \cX

Mark position 'a'
    ma

Go to book mark position
    `a

Show bookmarks
    :marks

Go to previous position
    ``
Confirm replace all 'foo' with 'bar' on line
    :s/foo/bar/gc

Replace current char with 'x'
    rx

Confirm replace all 'foo' with 'bar' in file
    :%s/foo/bar/gc

Replace first 'foo' with 'bar'
    :s/foo/bar

Replace all 'foo' with 'bar' between lines 2 and 9
    :2,9s/foo/bar/g

Ignore case replace first 'foo' with 'bar'
    :s/foo/bar/i

Replace first 'foo' with 'bar' on every line
    :%s/foo/bar

Vim temporary cancel highlight
    :noh  or :nohlsearch

Match a form feed
    \f

Match character with code hhhh(4 hex digits)
    \uhhhh

Match a vertical tab
    \v

Match character with code hh(2 hex digits)
    \xhh

# Regex-Flags Practice
Global search
    g

Multi-line search
    m
    
"sticky" search match staring at current position in target string
    y

Case-insensitive search
    i
# Regex-Flags Practice

Vi and Vim Editor Syntax of the text substitution inside vim editor:
    :[range]s[substitute]/{parttern}/{string}/[flags] [count]

Following are three possible flags.
    [c] Confirm each substitution
    [g] Replace all occurrences in the line
    [i] Ignore case for the pattern

for the [range]
:s  means current line
:%s means every lines
