##########bloody shit################
--------------------2017-03-10--------------------
New window to left
    :vs

Change highlighted text
    c

Scroll up
    ^y

"stick" search match starting at current position in target string
    y

Create tar with gzip compression
    tar czf file.tar.gz files

Search for 'pattern' in output of cmd
    cmd | grep pattern

Bing job 2 to foreground
    fg 2


--------------------2017-03-10--------------------

--------------------2017-03-09--------------------
Move-down(Move cursor one line down)
    j

Move-up(Move cursor one line up)
    k

Move-page-up(Move cursor half a page up)
    ^u

Move-page-down(Move cursor half a page down)
    ^d

Scorll-line-up(Scroll one line up)
    ^y

Scorll-line-down(Scroll one line down)
    ^e
--------------------2017-03-09--------------------


--------------------2017-03-05--------------------
Move to previous
    ^p
--------------------2017-03-05--------------------



--------------------2017-03-03--------------------
Move-page-up(Move cursor half a page up)
    ^u

Move-page-down(Move cursor half a page down)
    ^d

--------------------2017-03-03--------------------


--------------------2017-03-02--------------------
Reference current record line
    $0

Match beginning of field
    ^

Print line immediate after regex,but no line containing regex
    awk '/regex/{getline;print}' file

--------------------2017-03-02--------------------


--------------------2017-02-26--------------------
view-blob(Show blob view)
    f

view-stash(Show stash view)
    y

view-stage(Show stage view)
    c

Lookup 'cmd' in help
    :help cmd

Execute cmd and return status
    system(cmd)

Count lines in file
    awk 'END{print NF}' file

Print line immediately after regex,but no line containing regex
    awk '/regex/{getline;print}' file

Record separator of input file
    RS

Print total number of lines that contain foo
    awk '/foo/{n++};END{print n+0}' file
--------------------2017-02-26--------------------



--------------------2017-02-25--------------------
view-blob(Show blob view)
    f
--------------------2017-02-25--------------------


--------------------2017-02-23--------------------
"Stick" search match starting at current position in target String
    y

Match character with code hh
    \xhh

Match a line feed
    \n

Negative lookahead
    ?!

Lookahead
    ?=

Show where app location is
    whereis app

Find file names quickly
    locate file

Return len-char substring of s that begins at index
    substr(s,index,len)

File separator of input file
    FS
--------------------2017-02-23--------------------


--------------------2017-02-22--------------------
Print first field for each record in file
    awk '{print $1}' file

Count lines in file 
    awk 'END{print NR}' file

Print line if field 1 matches regex in file
    awk '$1 ~ /regex/' file

Number of fields in current record
    NF

Print line immediately after regex,but no line containing regex
    awk '/regex/{getline;print}' file
--------------------2017-02-22--------------------


--------------------2017-02-20--------------------
List current dir contents(long format)
    ls -l

Background current command
    ^z

Search for 'pattern' in output of cmd
    cmd | grep pattern

Show where app location is
    whereis app

File Transfer Protocol - Control(FTP)
    21

Match a NULL
    \0

Match any non-word character
    \W
--------------------2017-02-20--------------------


--------------------2017-02-19--------------------
Move to end of line
    $

Move to end of word
    e

Search for current word forward
    *

Set seed for rand and return previous seed
    srand

Match any single character
    .

"sticky" search match staring at current position in target string
    y

Match a line feed
    \n
--------------------2017-02-19--------------------


--------------------2017-02-18--------------------
Server to client Dynamic Host Configuration Protocol V6
    547

Client to server Dynamic Host COnfiguration Protocol v4
    67

Telnet
    23

Show man page for cmd
    man cmd

Terminate(KILL) process id of 5
    kill -9 5
--------------------2017-02-18--------------------


--------------------2017-02-17--------------------
Match any alphanumeric character(including underscore)
    \w

Delete word
    dw

Cut highlighted text
    d

Move to beginning of line
    0

Move to end of line
    $

New window to left
    :vs

Visual mode highlight lines
    V

Change rest of current word
    ce

Execute and insert results of 'cmd'
    :r !cmd

Print line number 12 of file
    awk 'NR==12' file

Execute action for matched pattern 'pattern' on file 'file'
    awk '/pattern/{action}' file

Print line immediately after regex,but no line containing regex
    awk '/regex/{getline;print}' file

Substitute t for first occurrence of regex r in string s
    sub(r,t,s)
--------------------2017-02-17--------------------


--------------------2017-02-16--------------------
Compress 'file' with gzip
    gzip file

Find file names quickly
    locate file

Create tar with gzip compression
    tar czf file.tar.gz files

Show man page for cmd
    man cmd
--------------------2017-02-16--------------------


--------------------2017-02-15--------------------
Match a vertical tab
    \v

Look up word in man page
    K

Lookup 'cmd' in help
    help cmd

Confirm replace all 'foo' with 'bar' in file
    %s/foo/bar/gc

Search forwards for 'foo'
    /foo

Confirm replace all 'foo' with 'bar' on line
    :s/foo/bar/gc

Simple Mail Transfer Protocol(SMTP)
    25
--------------------2017-02-15--------------------


--------------------2017-02-14--------------------
Match character with code hh(2 hex digits)
    \xhh

Match control character X in a string
    \cX

Match a single character other than white space
    \S

Match a single white space character(space,tab,form feed,or line feed)
    \s
--------------------2017-02-14--------------------

--------------------2017-02-13--------------------
Print only lines that do not match regex
    awk '!/regex/' file    # note regex must surround with //
--------------------2017-02-13--------------------

--------------------2017-02-12--------------------
Show character info
    ga
    
Return a list of lines in s $ 'hello\nworld'=>['hello','world']
    s.splitlines()

Return True if s is lower
    s.islower()

Return list of s split by sep with rightmost maxsplits performed
    s.rsplit(sep,maxsplit)

Return s joined by iterable '123' # 'hello' => '1hello2hello3'
    s.join('123')

Casefold s(aggressive lowercasing for caseless matching)# 'Abc'=> 'abc'
    s.casefold() # Python3

Partition string at last occurrence of sep,return 3-tuple with part before,the sep,and part after
# 'hello' => s.rpartition('l') => ('hel','l','o')
s.rpartition(sep)

Return True if s is alphabetic
    s.isalpha()
    
Return True if s starts with s2
    s.startswith(s2)

Return True if s is decimal
    s.isdecimal()

Return list of s split by sep with leftmost performed
    s.split(sep,maxsplit)

Return True if s is uppercase
    s.isupper()

Partition string at sep and return 3-tuple before,the sep itself,and part after
#'hello'=>('he','l','lo')
s.partition(sep)

Slice of s from i to j with step k
    s[i:j:k]

Return True if s ends with s2
    s.endswith(s2)

Return True if s is titlecased # 'Hello World' => True
    s.istitle()
    
Return True if s is alphanumeric
    s.isalnum()

Return True if s is numeric
    s.isnumeric()
--------------------2017-02-12--------------------


--------------------2017-02-11--------------------
Server to client Dynamic Host Configuration Protocol(V6)
    547

Execute command 3 in history
    !3

Move to beginning of line
    ^a

Decompress file.gz
    gzip -d file.gz

Find file names quickly
    locate file
--------------------2017-02-11--------------------


--------------------2017-02-10--------------------
Line number of the current record
    NR

Count lines in file
    awk 'END{print NR}' file

Server to client Dynamic Host Configuration Protocol(V6)
    547

Client to server Dynamic Host Configuration Protocol(V6)
    546

Telnet(TELNET)
    23

Halt current command
    ^c

Find file names quickly
    locate file

Background current command
    ^z

Match character with code hh(2 hex digits)
    \xhh

Match character with code hh(4 hex digits)
    \uhhhh

Match any non-word character
    \W
--------------------2017-02-10--------------------

--------------------2017-02-09--------------------
Create tar with gzip compressioin
    tar czf file.tar.gz files

Show which app
    which app

Search for 'pattern' in output of cmd
    cmd | grep pattern 

Remove directory 'dir'
    rm -r dir

Display all processes
    top

Extract files from 'file.tar'
    tar xf file.tar

Move to end of line
    ^e

Delete char infront of cursor or logout
    ^d

Show where app location is
    whereis app
--------------------2017-02-09--------------------


--------------------2017-02-07--------------------
Print line immediately after regex,but no line containing regex
    awk '/regex;END{getline;print}' file

Print total number of lines that contain foo
    awk '/foo/{n++}; END{print n+0}' file

Go to bookmark position 'a'
    `a`

Search for current word forward
    *

"Sticky" search match starting at current position in target string
    y

Match a single character other than white space
    \S

Match a line feed
    \n
--------------------2017-02-07--------------------

--------------------2017-02-06--------------------
Print first field for each record in file excluding the first record
    awk 'NR!=1{print $1}' file

Match end of input
    $

"sticky" search match starting at current position in target string
    y

Match any non-word character
    \W

Match a carriage return
    \r   (\n is the bloody line feed)

Negative lookbehind
    ?<!

Server to client Dynamic Host Configuration Protocol(V6)
    548

Server to client Dynamic Host Configuration Protocol(V4)
    68

Client to server Dynamic Host Configuration Protocol(v6)
    547
    
--------------------2017-02-06--------------------


--------------------2017-02-05--------------------
Compress 'file' with gzip
    gzip file

Create tar with gzip compression
    tar czf file.tar.gz files

Decompress file.gz
    gzip -d file.gz

Extract files from file.tar.gz
    tar xzf file.tar.gz

Show where app location is
    whereis app

List current dir contents
    ls

Remove 'file'(force)
    rm -f file

Find file names quickly
    locate file

Server to client Dynamic Host Configuration Protocol(V6)
    548
--------------------2017-02-05--------------------


--------------------2017-02-04--------------------
File Transfer Protocol - Data(FTP-DATA)
    20

File Transfer Protocol - Control(FTP)
    21

Secure Shell(SSH)
    22

Telnet(TELNET)
    23

Server to client Dynamic Host Configuration Protocol v6
    547

Print first field for each record in file excluding the first record
    awk 'NR!=1{print $1}' file

Print first field for each record in file
    awk '{print $1}' file

Print total number of lines that contain foo
    awk '/foo/{n++}; END{print n+0}' file
--------------------2017-02-04--------------------


--------------------2017-02-03--------------------
Print line number 12 of file
    awk 'NR==12' file

Print first field for each record in file excluding the first record
    awk 'NR!=1{print $1}' file

Print total number of lines that contain foo
    awk '/foo/{n++};END{print n+0}' file

Print total number of fields in all lines
    awk '{total=total+NF};END{print total}' file

Match 'x' but do not remember the match
    (?:x)

Global search 
    g

Match 0 or 1
    ?

"sticky" search match starting at current position in target string
    y
--------------------2017-02-03--------------------

--------------------2017-02-02--------------------
Print first field for each record in file excluding the first record
    awk 'NR!=1{print $1}' file

Print total number of fields in all lines
    awk '{total=total+NF}END;{print total}' file

Print total number of lines that contain foo
    awk '/foo/{n++};END{print n+0}' file

Count lines in file
    awk 'END{print NR}' file

Print line immediately after regex,but no line containing regex in file
    awk '/regex/getline;print}' file
--------------------2017-02-02--------------------

--------------------2017-01-31--------------------
Print line immediately after regex,but no line containing regex
    awk '/regex/{getline;print}' file

Print total number of lines that contain foo
    awk '/foo/{n++};END{print n+0}' file

Print total number of fields in all lines
    awk '{total=total+NF};END{print total}' file

Count lines in file
    awk 'END{print NR}' file

Print first field for each record in file excluding the first record
    awk 'NR!=1{print $1}' file
--------------------2017-01-31--------------------

--------------------2017-01-30--------------------
Count lines in file
    awk 'END{print NR}' file

Print total number of fields in all lines
    awk {total=total+NF};END{print total}' file

Print total number of lines that contain foo
    awk '/foo/{n++};END{print n+0}' file

Scroll up
    ^y

Move language autocomplete forward
    ^x

Display effective username
    whoami

Display your active processes
    ps

Delete char infront of cursor or logout
    ^d

Create tar with gzip compression
    tar czf file.tar.gz files

Find file names quickly
    locate file

Show which app
    which app

Display all processes
    top

List current dir contents
    ls

Remove 'file'(force)
    rm -f file

List current dir contents including hidden
    ls -a

Show where app location is
    whereis app

--------------------2017-01-30--------------------

--------------------2017-01-29--------------------
Search recursively for 'pattern' in dir
    grep -r pattern dir

Find file names quickly
    locate file

Compress 'file' with gzip
    gzip file

Terminate all processes named 'proc'
    killall proc

Create tar with gzip compression
    tar czf file.tar.gz files

Terminate process id of 5
    kill 5

Extract files from file.tar.gz
    tar xzf file.tar.gz

Search for 'pattern' in output of cmd
    cmd | grep pattern

List current dir contents including hidden 
    ls -a

Create a tar 'file.tar' with 'files'
    tar cf file.tar files

Show info about user
    finger user

Extract files from 'file.tar'
    tar xf file.tar

Search for 'pattern' in 'files'
    grep pattern files

Delete char infrond of cursor or logout
    ^d
--------------------2017-01-29--------------------












Negative lookahead
    ?!

Negative lookbehind
    ?<!

Comment
    ?#

########command line the mistakes what I made##########
Create symbolic 'link1' to 'file1'
    ln -s file1 link1

Create tar with gzip compression
    tar czf file.tar.gz files

Extract files from file.tar.gz
    tar xzf file.tar.gz

Create a tar 'file.tar' with 'files'
    tar cf file.tar files

2017-01-16 10:03
Create a tar 'file.tar' with 'files'
    tar cf file.tar files

List current dir contents
    ls

Delete char begind cursor(backspace)
    ^h

Delete char in frond of cursors or logout
    ^d

Extract files from 'file.tar'
    tar xf file.tar

List current dir contents sorted by mod date
    ls -t

Change to previous working dir
    cd -

Output file 'file'
    more file

Show which app
    which app

Search for 'pattern' in output of cmd
    cmd | grep pattern

Show man page for cmd
    man cmd

Display who is logged in
    w

Terminate all processes named 'proc'
    killall proc

Show info about use
    finger user

Find file names quickly
    locate file

Show kernel info
    uname -a

Display effective username
    whoami

2017-01-16 10:03
########command line the mistakes what I made##########



########Netports the mistakes what I made##########
Simple Mail Transfer Protocol(SMTP)
    25

Trivial File Transfer Protocol(TFTP)
    69

File Transfer Protocol(FTP)
    21

Secure Shell (SSH)
    22

Telnet(TELNET)
    23
########Netports the mistakes what I made##########

########AWK the mistakes what I made##########
Print line if field 1 does NOT match regex in file
    awk '$1 !~ /regex/' file

Print only lines that do not match regex in file
    awk '!/regex/' file

Reference number of the current record relative to current input file
    FNR

Record separator of the outputted data(default newline)
    ORS

Field separator of the outputted data(default whitespace)
    OFS

Field separator of the input data(default whitespace)
    FS

2017-01-10
Record separator of input file(default newline)
    RS

Record separator of the outputted data(default newline)
    ORS

Pirnt line if field 1 matches regex in file
    awk '$1 ~ /regex/' file

Field separator of the outputted data(default whitespace)
    OFS

Reference number of the current record relative to current input file
    FNR
2017-01-10

2017-01-18
Number of fields in current record
    NF

Return len-char substring of s that begins at index(counted from 1)
    substr(s,index,len)

Length of string s (or $0 if no arg)
    length(s)
2017-01-18

2017-01-19
Return len-char substring of s that begins at index(counted from 1)
    substr(s,index,len)
2017-01-19

########AWK the mistakes what I made##########

########regex the mistakes what I made##########
Match a single white space character(space,tab,form feed or line feed)
    \s

Match a single character other than white space
    \S

Match any alphanumeric character(including understore)
    \w

Match any non-wordcharacter
    \W

"Sticky" search match starting at current position in target string
    y

Match a tab
    \t
########regex the mistakes what I made##########

########VIM the mistakes what I made##########
Insert at start of Line
    I

New window to left
    sp
########VIM the mistakes what I made##########








    Move language autocomplete forward ^x,backward ^o.
    Move autocomplete forward ^n, backward ^p,

when vim in command mode
    you wanna type the bloody ^m
    you need to type CTRL-V <CR>

Vi and Vim Editor Syntax of the text substitution inside vim editor:
    :[range]s[substitute]/{parttern}/{string}/[flags] [count]

Following are three possible flags.
    [c] Confirm each substitution
    [g] Replace all occurrences in the line
    [i] Ignore case for the pattern

for the [range]
:s  means current line
:%s means every lines

Replace all 'foo' with 'bar' on line
    :s/foo/bar/g

Replace first 'foo' with 'bar' on every line
    :%s/foo/bar/

Ignore case replace first 'foo' with 'bar'
    :s/foo/bar/i

Replace all 'foo' with 'bar' between lines 2 and 9
    :2,9s/foo/bar/g
##########bloody shit################




/********************************vim*********************************/
Move to next word       w

Move to first line of screen    H   

Append      a

Move to middle line of screen   M

Enter replace mode  R

Move to last line of screen     L

Insert      i

Enter replace mode      R

Move to end of line     $

Move right one character    h

Insert at start of line     I

Go to command mode  esc


Insert new line above       O

move to last line of screen     L

Insert new line below   o

Change char and return to cmd mode      r

Delete word     dw

Move to end of word     e

Move to previous word       b

Move to begginning of word      b

Change rest of current word     ce

Append at end of line   A

Move before previous 'w' on line    Tw

Move before next 'w' on line    tw

Repeat last f,F,t,or T      ;

Repeat last f,F,t,or T reversed     ,

Move to next 'w' on line        fw

Move to previous 'w' on line        Fw

Move before next 'w' on line    tw

Move backward one screen    ^b

Go to line 12   12G

Move 5 words forward    5w

Move 5 words backward   5b

Scroll down     ^e

Scroll up       ^y

/********************************vim*********************************/






/********************************Git*********************************/
show what's changed but not yet staged
    git diff

Initialize a repository
    git init

Commit changed
    git commit

Stage modified file main.txt
    git add main.txt

Pull data from remote 'develop' without merging
    git fetch develop

Show status of working tree
    git status

Stage files and commit
    git commit -a

Fetch and merge branch 'develop' from origin
    git pull origin develop

start tracking file.txt
    git add file.txt

Create local copy of remote repository at 'url'
    git clone url

Show branches not yet merged into current branch
    git branch --no-merged

Show last commit on all branch
    git branch -v

Delete remote branch 'fix2' from origin
    git push origin :fix2 (caution: there is a blank between origin and the colon)

Create local branch 'fix1' based off origin branch
    git checkout -b fix1 origin/fix1

Create tracking branch 'fix2' based off origin
    git checkout --track origin/fix2

Push local branch 'feature1' to origin
    git push origin feature1

Push develop branch to remote staging master
    git push staging develop:master

Show branches already merged into current branch
    git branch --merged

/********************************Git*********************************/









/********************************Python*********************************/
Python Strings-Whitespace I practice    
Center s with blank padding of width # 'hi' => ' hi '
    s.center(width)

Right justify s with total size of width # 'hello' => ' hello'
    s.rjust(width)

Left justify s with total size of width
    s.ljust(width)

Return true if s only contains whitespace characters
    s.isspace()

Slice of s from i to j with step k
    s[i;j;k]

Return highest index of s2 in 2(raise ValueError if not found)
    s.rindex(s2)

Index of first occurrence of s2 in s after index i and before index j
    s.index(s2,i,j)

Return highest index of s2 in s
    s.frind(s2)
/********************************Python*********************************/




/********************************Regex*********************************/
Regex-Character Classes I Practice
Match a single character other than white space
    \S
Match preceding character 1 or more times
    +
Escape a special character
    \
Match a digit character
    \d
Match any single character
    .
Match a single white space character(space.tab.form feed,or line end)
    \s
Match a non-digit character
    \D
Match either 'x' or 'y'
    x | y
Match any alphanumeric character(including underscore)
    \w
Match any non-word character
    \W

Match a word boundary
    \b

Match a non-word boundary
    \B

Match anything not in character set 'abc'
    [^abc]


/********************************Regex*********************************/



Change highlighted text     
    c

Visual mode select characters
    v (lowercase)

Visual mode highlight lines
    V (uppercase)

Go to match parenthesis or bracket
    %

Shift right
    >

Shift left
    <

Swap case
    ~

Re-indent selection
    =

Yank(copy)highlighted text
    y

Cut highlighted text
    d

Write selection to 'filename'
    :w filename

Repeat last command as root
    sudo !!

Repeat last command
    !!

Execute command 3 in history
    !3

Internet Message Access Protocol(IMAP)
    143

Network Time protocol(NTP)
    123

Client to server Dynamic Host Configuration Protocol v6(DHCPv6)
    546

Create a tar 'file.tar' with 'files'
    tar cf file.tar files

Extract files from 'file.tar'
    tar xf file.tar

Create tar with gzip compression
    tar czf file.tar.gz files

Extract files from file.tar.gz
    tar xzf file.tar.gz

Extract files from file.tar
    tar xf file.tar

Compress 'file' with gzip
    gzip file

Decompress file.gz
    gzip -d file.gz

If then condition
    ?()

If then else condition
    ?()|

Once-only subexpression
    ?>

Lookbehind
    ?<=

Negative lookbehind
    ?<!

Lookahead
    ?=

Negative lookahead
    ?!

Comment
    ?#

Close all windows
    :qa

Set current buffer to 'finename'
    :e filename

Write selection to 'filename'
    :w filename

New window to left
    :vs

New window above
    :sp

Return s joined by iterable '123' # 'hello'=>'1hello2hello3'
    s.join('123')

Partition string at last occurence of sep,return 3 tuple with part before,
the sep,and part after # 'hello'=> ('hel','l','o')
    s.rpartition(sep)

Return list of s split by sep with leftmost maxsplit performed
    s.split(sep, maxsplit)

Return a list of lines in s # 'hello\nworld'=>['hello','world']
    s.splitlines()

Set current buffer to 'filename'
    :e filename

Show character info
    ga

Show file info
    ^g

Save and exit if modified
    :x

Delete 'filename'
    :!rm filename

Execute and insert results of 'cmd'
    :r !cmd

Read and insert 'filename'
    :r filename

Open new file
    :e

Delete all blank lines
    :g/^$/d

Match at least n and at most m occurrences of the preceding character
    {n,m}

Match exactly n occurrences of preceding character
    {n}

Match 0 or 1
    ?

Delete lines which stars with blank
    :%s/^ *//g

Delete lines which ends with blank
    :%s/ *$//g

File Transfer Protocol-Data(FTP-DATA)
    20

File Transfer Protocol-Control(FTP)
    21

Match a NULL
    \0

Match a tab
    \t

Match a line feed
    \n

Match a carriage return
    \r

Match control character X in a string
    \cX

Mark position 'a'
    ma

Go to book mark position
    `a

Show bookmarks
    :marks

Go to previous position
    ``
Confirm replace all 'foo' with 'bar' on line
    :s/foo/bar/gc

Replace current char with 'x'
    rx

Confirm replace all 'foo' with 'bar' in file
    :%s/foo/bar/gc

Replace first 'foo' with 'bar'
    :s/foo/bar

Replace all 'foo' with 'bar' between lines 2 and 9
    :2,9s/foo/bar/g

Ignore case replace first 'foo' with 'bar'
    :s/foo/bar/i

Replace first 'foo' with 'bar' on every line
    :%s/foo/bar

Vim temporary cancel highlight
    :noh  or :nohlsearch

Match a form feed
    \f

Match character with code hhhh(4 hex digits)
    \uhhhh

Match a vertical tab
    \v

Match character with code hh(2 hex digits)
    \xhh

# Regex-Flags Practice
Global search
    g

Multi-line search
    m

"sticky" search match staring at current position in target string
    y

Case-insensitive search
    i
# Regex-Flags Practice

Vi and Vim Editor Syntax of the text substitution inside vim editor:
    :[range]s[substitute]/{parttern}/{string}/[flags] [count]

Following are three possible flags.
    [c] Confirm each substitution
    [g] Replace all occurrences in the line
    [i] Ignore case for the pattern

for the [range]
:s  means current line
:%s means every lines

Set incremental search
    :set is

Turn off incremental search
    :set nois

Search for current word forward
    *

Search for current word backward
    #

Set highlight matching phrases
    :set hls

Set ignore case
    set ic

Set don't ignore case
    set noic

Overwrite mode
    option + command + O

Paste previous
    shift + command + V

Free hand editing mode
    option + command + E

Comment line / selection
    command + /

Transpose characters
    control + T

Shift left
    command + [

Shift right
    command + ]

Show clipboard history
    control + option + command + v

Duplicate line
    shift + control + D

Redo
    shift + command + z

Delete char on right
    control + d

Align assignments
    option + command + ]

Match 'x' but do not remember the match
    (?:x)

Match 'x' and remember the match
    (x)

A back reference to the last substring matching the n parenthetical in the regex
    \n

Start editing where foo is defined
    vim -t foo

Move autocomplete backward
    ^p

Move language autocomplete forward
    ^x

Move language autocomplete backward
    ^o

Yank to beginning of next word
    yw

Lookup word in man pages
    K

Run make
    :make



/********************************awk*********************************/
Reference first column
    $1

Execute action for matched pattern ‘pattern’ on file ‘file’
    awk ‘/pattern/ {action}’ file

Char to separate two actions
    ;

Print current record line
    print

Reference current record line
    $0

Line number of the current record
    NR

Number of fields in current record
    NF

Field separator of input file(default whitespace)
    FS

Do not match operator
    !~

Command line option to specify input field delimiter
    -F

Match operator
    ~
Concat str1 and str2
    str1 str2

Denotes block executed once at start
    BEGIN

Denotes block executed once at end
    END

Print line if field 1 matches regex in file
    awk '$1 ~ /regex/' file

Print line if field 1 does not match regex in file
    awk '$1 !~ /regex/' file

Print only lines that do not match regex in file
    awk '!/regex/' file

Print any line where field 2 is equal to "foo" in file
    awk '$2 == "foo"' file

Print any line where field 2 is NOT equal to "foo" in file
    awk '$2 != "foo"' file

print first field for each record in file
    awk '{print $1}' file

Field separator of the outputted data(default whitespace)
    OFS

Reference number of the current record relative to current input file
    FNR

Reference current input file
    FILENAME

Record seperator of the outputted data(default newline)
    ORS

Record separator of input file(default newline)
    RS

2017-01-12 10:56
Argument array, assignable
    ARGV

Argument count, assignable
    ARGC

Conversion format used when converting numbers(default %.6g)
    CONVFMT

Array of enviroment variables
    ENVIRON

Separates multiple subscripts(default 034)
    SUBSEP

Output format for numbers(default %.6g)
    OFMT

2017-01-17 09:50
Random number between 0 and 1
    rand

Set seed for rand and return previous seed
    srand

Length of string s( or $0 if no arg)
    length(s)

Position in string s where string t occurs,0 if not found
    index(s,t)

Truncate x to integer value
    int(x)

Return len-char substring of s that begins at index(counted from 1)
    substr(s,index,len)
2017-01-17 09:50

2017-01-20 10:17
Substitute t for all occurrences of regex r in string s
    gsub(r,t,s)

Substitute t for first occurrence of regex r in string s (or $0 if s not given)
    sub(r,t,s)

Position in string s where regex r occurs, or 0 if not found
    match(s,r)

Split string s into array a split by fs,returning length of a
    split(s,a,fs)

2017-01-20 10:17

    
2017-01-25 13:38
String to lowercase
    tolower(s)

String to uppercase
    toupper(s)

Execute cmd and return exit status
    system(cmd)

Set $0 to next input record from current input file.
    getline

2017-01-25 13:38

2017-01-28 12:59
Print line immediately after regex,but no line containing regex in file
    awk '/regex/{getline;print}' file

Count lines in file
    awk 'END{print NR}' file

Print first field for each record in file excluding the first record
    awk 'NR!=1{print $1}' file

Print total number of lines that contain foo
    awk '/foo/{n++}; END {print n+0}' file

Print line number 12 of file
    awk 'NR==12' file

Print total number of fields in all lines
    awk '{total=total+NF};END{print total}' file

Print lines with more than 32 characters in file
    awk 'length > 32' file

2017-01-28 12:59
/********************************awk*********************************/

